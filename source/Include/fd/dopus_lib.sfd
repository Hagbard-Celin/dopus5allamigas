* This SFD file was automatically generated by fd2sfd from
* Include/fd/dopus_lib.fd and
* Include/clib/dopus5_protos.h.
==base _DOpusBase
==basetype struct Library *
==libname dopus.library
==include <exec/types.h>
==include <utility/tagitem.h>
* "dopus.library"
*                                                             
* Support routines for Directory Opus and associated programs 
* (c) Copyright 1995 Jonathan Potter                          
*                                                             
==bias 30
==public
ULONG RemovedFunc0() ()
UWORD RandomDopus(int limit) (d0)
*
ULONG Atoh(char * str, short len) (a0,d0)
void BtoCStr(BSTR bstr, char * cstr, int len) (a0,a1,d0)
ULONG DivideU(ULONG num, ULONG div, ULONG * rem, struct Library * utility) (d0,d1,a0,a1)
void Itoa(long num, char * str, char sep) (d0,a0,d1)
void ItoaU(ULONG num, char * str, char sep) (d0,a0,d1)
void Ito26(ULONG num, char * str) (d0,a0)
*
void BytesToString(ULONG bytes, char * string, short places, char sep) (d0,a0,d1,d2)
void DivideToString(char * string, ULONG num, ULONG div, short places, char sep) (a0,d0,d1,d2,d3)
*
void SetBusyPointer(struct Window * window) (a0)
void BuildKeyString(UWORD code, UWORD qual, UWORD mask, UWORD same, char * buffer) (d0,d1,d2,d3,a0)
void ActivateStrGad(struct Gadget * gadget, struct Window * window) (a0,a1)
*
struct TimerHandle * AllocTimer(ULONG unit, struct MsgPort * port) (d0,a0)
void FreeTimer(TimerHandle * handle) (a0)
void StartTimer(TimerHandle * handle, ULONG secs, ULONG micro) (a0,d0,d1)
BOOL CheckTimer(TimerHandle * handle) (a0)
void StopTimer(TimerHandle * handle) (a0)
*
BPTR GetDosPathList(BPTR copy) (a0)
void FreeDosPathList(BPTR list) (a0)
*
short DoSimpleRequest(struct Window * window, struct DOpusSimpleRequest * simplereq) (a0,a1)
short SimpleRequest(struct Window * parent, char * title, char * buttons, char * message, char * buffer, APTR data, long bufsize, ULONG flags) (a0,a1,a2,a3,d0,d1,d2,d3)
short SelectionList(Att_List * list, struct Window * parent, struct Screen * screen, char * title, short ok, ULONG cancel, char * sel, char * flags, char * buffer, char ** switchtxt, ULONG * switchflags) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6)
*                                                             
BOOL WriteIcon(char * name, struct DiskObject * obj) (a0,a1)
void WriteFileIcon(char * source, char * dest) (a0,a1)
*
DragInfo * GetDragInfo(struct Window * window, struct RastPort * rast, long width, long height, long flags) (a0,a1,d0,d1,d2)
void FreeDragInfo(DragInfo * draginfo) (a0)
void GetDragImage(DragInfo * draginfo, ULONG x, ULONG y) (a0,d0,d1)
void ShowDragImage(DragInfo * draginfo, ULONG x, ULONG y) (a0,d0,d1)
void HideDragImage(DragInfo * draginfo) (a0)
void StampDragImage(DragInfo * draginfo, ULONG x, ULONG y) (a0,d0,d1)
void GetDragMask(DragInfo * drag) (a0)
BOOL CheckDragDeadlock(DragInfo * drag) (a0)
void AddDragImage(DragInfo * drag) (a0)
void RemDragImage(DragInfo * drag) (a0)
*
struct Window * OpenConfigWindow(NewConfigWindow * newwindow) (a0)
void CloseConfigWindow(struct Window * window) (a0)
*
struct IntuiMessage * GetWindowMsg(struct MsgPort * port) (a0)
void ReplyWindowMsg(struct IntuiMessage * msg) (a0)
void StripIntuiMessagesDopus(struct Window * window) (a0)
void CloseWindowSafely(struct Window * window) (a0)
*
int CalcObjectDims(void * parent, struct TextFont * font, struct IBox * pos, struct IBox * dest, GL_Object * last, ULONG flags, GL_Object * obj, GL_Object * ob) (a0,a1,a2,a3,a4,d0,d1,d2)
int CalcWindowDims(struct Screen * screen, ConfigWindow * pos, struct IBox * dest, struct TextFont * font, ULONG flags) (a0,a1,a2,a3,d0)
*
ObjectList * AddObjectList(struct Window * window, ObjectDef * objects) (a0,a1)
void FreeObject(ObjectList * objlist, GL_Object * object) (a0,a1)
void FreeObjectList(ObjectList * objlist) (a0)
void RefreshObjectList(struct Window * window, ObjectList * list) (a0,a1)
*
GL_Object * GetObject(ObjectList * list, int id) (a0,d0)
*
void StoreGadgetValue(ObjectList * list, struct IntuiMessage * msg) (a0,a1)
void SetGadgetValue(ObjectList * list, UWORD id, ULONG value) (a0,d0,d1)
long GetGadgetValue(ObjectList * list, UWORD id) (a0,a1)
void SetObjectKind(ObjectList * list, ULONG id, UWORD kind) (a0,d0,d1)
void SetGadgetChoices(ObjectList * list, ULONG id, APTR choices) (a0,d0,a1)
*
BOOL CheckObjectArea(GL_Object * object, int x, int y) (a0,d0,d1)
BOOL GetObjectRect(ObjectList * list, ULONG id, struct Rectangle * rect) (a0,d0,a1)
void DisplayObject(struct Window * window, GL_Object * object, int fg, int bg, char * txt) (a0,a1,d0,d1,a2)
void DisableObject(ObjectList * list, ULONG id, BOOL state) (a0,d0,d1)
int BoundsCheckGadget(ObjectList * list, ULONG id, int min, int max) (a0,d0,d1,d2)
*
void AddWindowMenus(struct Window * window, MenuData * data) (a0,a1)
void FreeWindowMenus(struct Window * window) (a0)
*
void SetWindowBusy(struct Window * window) (a0)
void ClearWindowBusy(struct Window * window) (a0)
*
STRPTR GetString(struct DOpusLocale * locale, LONG num) (a0,d0)
*
struct Gadget * FindKeyEquivalent(ObjectList * list, struct IntuiMessage * msg, int process) (a0,a1,d0)
void ShowProgressBar(struct Window * window, GL_Object * object, ULONG total, ULONG count) (a0,a1,d0,d1)
*
void SetWindowID(struct Window * window, WindowID * id_ptr, ULONG id, struct MsgPort * port) (a0,a1,d0,a2)
ULONG GetWindowID(struct Window * window) (a0)
struct MsgPort * GetWindowAppPort(struct Window * window) (a0)
*
Att_List * Att_NewList(ULONG flags) (d0)
Att_Node * Att_NewNode(Att_List * list, char * name, ULONG data, ULONG flags) (a0,a1,d0,d1)
void Att_RemNode(Att_Node * node) (a0)
void Att_PosNode(Att_List * list, Att_Node * node, Att_Node * before) (a0,a1,a2)
void Att_RemList(Att_List * list, long flags) (a0,d0)
Att_Node * Att_FindNode(Att_List * list, long number) (a0,d0)
long Att_NodeNumber(Att_List * list, char * name) (a0,a1)
Att_Node * Att_FindNodeData(Att_List * list, ULONG data) (a0,d0)
long Att_NodeDataNumber(Att_List * list, ULONG data) (a0,d0)
char * Att_NodeName(Att_List * list, long number) (a0,d0)
long Att_NodeCount(Att_List * list) (a0)
void Att_ChangeNodeName(Att_Node * node, char * name) (a0,a1)
long Att_FindNodeNumber(Att_List * list, Att_Node * node) (a0,a1)
void AddSorted(struct List * list, struct Node * node) (a0,a1)
*
struct Menu * BuildMenuStrip(MenuData * data, struct DOpusLocale * locale) (a0,a1)
struct MenuItem * FindMenuItem(struct Menu * menu, UWORD id) (a0,d0)
UWORD DoPopUpMenu(struct Window * window, PopUpMenu * menu, PopUpItem ** item, UWORD code) (a0,a1,a2,d0)
PopUpItem * GetPopUpItem(PopUpMenu * menu, UWORD id) (a0,d0)
*                                                             
int IPC_Startup(IPCData * ipc, APTR data, struct MsgPort * reply) (a0,a1,a2)
ULONG IPC_Command(IPCData * ipc, ULONG command, ULONG flags, APTR data, APTR data_free, struct MsgPort * reply) (a0,d0,d1,a1,a2,a3)
void IPC_Reply(IPCMessage * msg) (a0)
void IPC_Free(IPCData * ipc) (a0)
IPCData * IPC_FindProc(struct ListLock * list, char * name, BOOL act, ULONG data) (a0,a1,d0,d1)
void IPC_Quit(IPCData * ipc, ULONG flags, BOOL wait) (a0,d0,d1)
void IPC_Hello(IPCData * ipc, IPCData * owner) (a0,a1)
void IPC_Goodbye(IPCData * ipc, IPCData * owner, ULONG flags) (a0,a1,d0)
ULONG IPC_GetGoodbye(IPCMessage * msg) (a0)
ULONG IPC_ListQuit(struct ListLock * list, IPCData * owner, ULONG flags, BOOL wait) (a0,a1,d0,d1)
void IPC_Flush(IPCData * port) (a0)
void IPC_ListCommand(struct ListLock * list, ULONG command, ULONG flags, ULONG data, BOOL wait) (a0,d0,d1,d2,d3)
IPCData * IPC_ProcStartup(ULONG * data, ULONG (*code)(IPCData *, APTR)) (a0,a1)
int IPC_Launch(struct ListLock * list, IPCData ** ipc, char * name, ULONG entry, ULONG stack, ULONG data, struct Library * dos) (a0,a1,a2,d0,d1,d2,a3)
*
APTR OpenImage(char * name, OpenImageInfo * info) (a0,a1)
void CloseImage(APTR image) (a0)
APTR CopyImage(APTR image) (a0)
void FlushImages() ()
short RenderImage(struct RastPort * rp, APTR image, UWORD left, UWORD top, struct TagItem * tags) (a0,a1,d0,d1,a2)
==varargs
short RenderImageTags(struct RastPort * rp, APTR image, UWORD left, UWORD top, Tag tags, ...) (a0,a1,d0,d1,a2)
void GetImageAttrs(APTR image, struct TagItem * tags) (a0,a1)
==varargs
void GetImageAttrsTags(APTR image, Tag tags, ...) (a0,a1)
*
void * NewMemHandle(ULONG puddle, ULONG thresh, ULONG type) (d0,d1,d2)
void FreeMemHandle(void * handle) (a0)
void ClearMemHandle(void * handle) (a0)
void * AllocMemH(void * handle, ULONG size) (a0,d0)
void FreeMemH(void * memory) (a0)
*
void DrawBox(struct RastPort * rp, struct Rectangle * rect, struct DrawInfo * info, BOOL recess) (a0,a1,a2,d0)
void DrawFieldBox(struct RastPort * rp, struct Rectangle * rect, struct DrawInfo * info) (a0,a1,a2)
*
Cfg_Lister * NewLister(char * path) (a0)
Cfg_ButtonBank * NewButtonBank(BOOL init, short type) (d0,d1)
Cfg_Button * NewButton(APTR memory) (a0)
Cfg_Function * NewFunction(APTR memory, UWORD type) (a0,d0)
Cfg_Instruction * NewInstruction(APTR memory, short type, char * string) (a0,d0,a1)
short ReadSettings(CFG_SETS * env, char * name) (a0,a1)
Cfg_Lister * ReadListerDef(APTR iff, ULONG id) (a0,d0)
Cfg_ButtonBank * OpenButtonBank(char * name) (a0)
void DefaultSettings(CFG_SETS * settings) (a0)
void DefaultEnvironment(CFG_ENVR * env) (a0)
Cfg_ButtonBank * DefaultButtonBank() ()
int SaveSettings(CFG_SETS * env, char * name) (a0,a1)
long SaveListerDef(APTR iff, Cfg_Lister * lister) (a0,a1)
short SaveButtonBank(Cfg_ButtonBank * bank, char * name) (a0,a1)
void CloseButtonBank(Cfg_ButtonBank * bank) (a0)
void FreeListerDef(Cfg_Lister * lister) (a0)
void FreeButtonList(struct List * list) (a0)
void FreeButtonImages(struct List * list) (a0)
void FreeButton(Cfg_Button * button) (a0)
void FreeFunction(Cfg_Function * function) (a0)
void FreeInstruction(Cfg_Instruction * ins) (a0)
void FreeInstructionList(Cfg_Function * func) (a0)
Cfg_ButtonBank * CopyButtonBank(Cfg_ButtonBank * bank) (a0)
Cfg_Button * CopyButton(Cfg_Button * button, APTR memory, short type) (a0,a1,d0)
Cfg_Function * CopyFunction(Cfg_Function * function, APTR memory, Cfg_Function * newfunc) (a0,a1,a2)
Cfg_Filetype * NewFiletype(APTR memory) (a0)
Cfg_FiletypeList * ReadFiletypes(char * name, APTR memory) (a0,a1)
int SaveFiletypeList(Cfg_FiletypeList * list, char * name) (a0,a1)
void FreeFiletypeList(Cfg_FiletypeList * list) (a0)
void FreeFiletype(Cfg_Filetype * type) (a0)
Cfg_Filetype * CopyFiletype(Cfg_Filetype * orig, APTR memory) (a0,a1)
Cfg_Function * FindFunctionType(struct List * list, UWORD type) (a0,d0)
short SaveButton(APTR iff, Cfg_Button * button) (a0,a1)
Cfg_Button * ReadButton(APTR iff, APTR memory) (a0,a1)
Cfg_Function * ReadFunction(APTR iff, APTR memory, struct List * funclist, Cfg_Function * function) (a0,a1,a2,a3)
*
struct IFFHandle * OpenIFFFile(char * name, int mode, ULONG id) (a0,d0,d1)
void CloseIFFFile(struct IFFHandle * iff) (a0)
*
struct Window * OpenStatusWindow(char * title, char * text, struct Screen * screen, LONG graph, ULONG flags) (a0,a1,a2,d1,d0)
void SetStatusText(struct Window * window, char * text) (a0,a1)
void UpdateStatusGraph(struct Window * window, char * text, ULONG total, ULONG count) (a0,a1,d0,d1)
*
ILBMHandle * ReadILBM(char * name, ULONG flags) (a0,d0)
void FreeILBM(ILBMHandle * ilbm) (a0)
void DecodeILBM(char * src, UWORD w, UWORD h, UWORD d, struct BitMap * dst, ULONG mask, char comp) (a0,d0,d1,d2,a1,d3,d4)
void DecodeRLE(RLEinfo * rleinfo) (a0)
*
void LoadPalette32(struct ViewPort * vp, ULONG * palette) (a0,a1)
void GetPalette32(struct ViewPort * vp, ULONG * palette, UWORD count, short first) (a0,a1,d0,d1)
*
APTR OpenBuf(char * name, long mode, long buffer_size) (a0,d0,d1)
long CloseBuf(APTR file) (a0)
long ReadBuf(APTR file, char * data, long size) (a0,a1,d0)
long WriteBuf(APTR file, char * data, long size) (a0,a1,d0)
long FlushBuf(APTR file) (a0)
long SeekBuf(APTR file, long offset, long mode) (a0,d0,d1)
long ExamineBuf(APTR file, struct FileInfoBlock * fib) (a0,a1)
*
DiskHandle * OpenDisk(char * disk, struct MsgPort * port) (a0,a1)
void CloseDisk(DiskHandle * handle) (a0)
*
struct Gadget * AddScrollBars(struct Window * win, struct List * list, struct DrawInfo * drawinfo, short noidcmp) (a0,a1,a2,d0)
struct Gadget * FindBOOPSIGadget(struct List * list, UWORD id) (a0,d0)
void BOOPSIFree(struct List * list) (a0)
*
BOOL SerialValid(serial_data * data) (a0)
*
void WB_Install_Patch() ()
BOOL WB_Remove_Patch() ()
struct AppWindow * WB_AddAppWindow(ULONG id, ULONG data, struct Window * window, struct MsgPort * port, struct TagItem * tags) (d0,d1,a0,a1,a2)
==varargs
struct AppWindow * WB_AddAppWindowTags(ULONG id, ULONG data, struct Window * window, struct MsgPort * port, Tag tags, ...) (d0,d1,a0,a1,a2)
BOOL WB_RemoveAppWindow(struct AppWindow * window) (a0)
struct AppWindow * WB_FindAppWindow(struct Window * window) (a0)
struct MsgPort * WB_AppWindowData(struct AppWindow * window, ULONG * id, ULONG * userdata) (a0,a1,a2)
BOOL WB_AppWindowLocal(struct AppWindow * window) (a0)
APTR LockAppList() ()
APTR NextAppEntry(APTR last, ULONG type) (a0,d0)
void UnlockAppList() ()
*
APTR AddNotifyRequest(ULONG type, ULONG data, struct MsgPort * port) (d0,d1,a0)
void RemoveNotifyRequest(APTR node) (a0)
void SendNotifyMsg(ULONG type, ULONG data, ULONG flags, short wait, char * name, struct FileInfoBlock * fib) (d0,d1,d2,d3,a0,a1)
*
BOOL StrCombine(char * s1, char * s2, char * s3, int len) (a0,a1,a2,d0)
BOOL StrConcat(char * s1, char * s2, int len) (a0,a1,d0)
*
BOOL WB_Launch(char * name, struct Screen * screen, short wait) (a0,a1,d0)
*
void CopyLocalEnv(struct Library * base) (a0)
*
BOOL CLI_Launch(char * name, struct Screen * screen, BPTR cd, BPTR in, BPTR out, short wait, long stack) (a0,a1,d0,d1,d2,d3,d4)
*
BOOL SerialCheck(char * num, ULONG * p) (a0,a1)
ULONG ChecksumFile(char * file, ULONG skip) (a0,d0)
*
void ReplyFreeMsg(APTR msg) (a0)
*
BOOL TimerActive(TimerHandle * timer) (a0)
*
Cfg_ButtonFunction * NewButtonFunction(APTR memory, UWORD type) (a0,d0)
*
APTR IFFOpen(char * name, UWORD mode, ULONG form) (a0,d0,d1)
void IFFClose(APTR handle) (a0)
long IFFPushChunk(APTR handle, ULONG id) (a0,d0)
long IFFWriteChunkBytes(APTR handle, APTR data, long size) (a0,a1,d0)
long IFFPopChunk(APTR handle) (a0)
long IFFWriteChunk(APTR handle, APTR data, ULONG chunk, ULONG size) (a0,a1,d0,d1)
*
struct Node * FindNameI(struct List * list, char * name) (a0,a1)
*
void AnimDecodeRIFFXor(unsigned char * delta, char * plane, UWORD rowbytes, UWORD sourcebytes) (a0,a1,d0,d1)
void AnimDecodeRIFFSet(unsigned char * delta, char * plane, UWORD rowbytes, UWORD sourcebytes) (a0,a1,d0,d1)
*
BOOL ConvertRawKey(UWORD code, UWORD qual, char * key) (d0,d1,a0)
*
struct ClipHandle * OpenClipBoard(ULONG unit) (d0)
void CloseClipBoard(struct ClipHandle * clip) (a0)
BOOL WriteClipString(struct ClipHandle * clip, char * string, long len) (a0,a1,d0)
long ReadClipString(struct ClipHandle * clip, char * string, long len) (a0,a1,d0)
*
void LockAttList(Att_List * list, short exclusive) (a0,d0)
void UnlockAttList(Att_List * list) (a0)
*
void RemovedFunc1() ()
void RemovedFunc2() ()
void RemovedFunc3() ()
void RemovedFunc4() ()
void RemovedFunc5() ()
void RemovedFunc6() ()
void RemovedFunc7() ()
*
long GetSemaphore(struct SignalSemaphore * sem, long exc, char * data) (a0,d0,a1)
void FreeSemaphore(struct SignalSemaphore * sem) (a0)
void ShowSemaphore(struct SignalSemaphore * sem) (a0)
*
BOOL SaveFunction(APTR iff, Cfg_Function * func) (a0,a1)
*
ULONG IFFNextChunk(APTR iff, ULONG form) (a0,d0)
long IFFChunkSize(APTR iff) (a0)
long IFFReadChunkBytes(APTR iff, APTR buffer, long size) (a0,a1,d0)
APTR IFFFileHandle(APTR iff) (a0)
long IFFChunkRemain(APTR iff) (a0)
ULONG IFFChunkID(APTR iff) (a0)
ULONG IFFGetFORM(APTR iff) (a0)
*
ULONG ScreenInfo(struct Screen * screen) (a0)
*
struct Hook * GetEditHook(ULONG type, ULONG flags, struct TagItem * tags) (d0,d1,a0)
==varargs
struct Hook * GetEditHookTags(ULONG type, ULONG flags, Tag tags, ...) (d0,d1,a0)
void FreeEditHook(struct Hook * hook) (a0)
*
void InitWindowDims(struct Window * window, WindowDimensions * dims) (a0,a1)
void StoreWindowDims(struct Window * window, WindowDimensions * dims) (a0,a1)
BOOL CheckWindowDims(struct Window * window, WindowDimensions * dims) (a0,a1)
*
void InitListLock(struct ListLock * ll, char * name) (a0,a1)
*
void IPC_QuitName(struct ListLock * list, char * name, ULONG flags) (a0,a1,d0)
*
UWORD QualValid(UWORD qual) (d0)
*
BPTR FHFromBuf(APTR file) (a0)
*
ULONG WB_AppIconFlags(struct AppIcon * icon) (a0)
*
BOOL GetWBArgPath(struct WBArg * arg, char * buf, long size) (a0,a1,d0)
*
void RemovedFunc8() ()
*
struct DosList * DeviceFromLock(BPTR lock, char * name) (a0,a1)
struct DosList * DeviceFromHandler(struct MsgPort * port, char * name) (a0,a1)
BOOL DevNameFromLockDopus(BPTR lock, char * buffer, long len) (d1,d2,d3)
*
ULONG GetIconFlags(struct DiskObject * icon) (a0)
void SetIconFlags(struct DiskObject * icon, ULONG flags) (a0,d0)
void GetIconPosition(struct DiskObject * icon, short * x, short * y) (a0,a1,a2)
void SetIconPosition(struct DiskObject * icon, short x, short y) (a0,d0,d1)
*
BOOL BuildTransDragMask(UWORD * mask, UWORD * image, short width, short height, short depth, long flags) (a0,a1,d0,d1,d2,d3)
*
ULONG * GetImagePalette(APTR image) (a0)
void FreeImageRemap(ImageRemap * remap) (a0)
*
void SwapListNodes(struct List * list, struct Node * s1, struct Node * s2) (a0,a1,a2)
*
void RemovedFunc9() ()
*
void Seed(int seed) (d0)
*
void RemovedFunc10() ()
void RemovedFunc11() ()
void RemovedFunc12() ()
*
struct DiskObject * CopyDiskObject(struct DiskObject * icon, ULONG flags) (a0,d0)
void FreeDiskObjectCopy(struct DiskObject * icon) (a0)
*
void IFFFailure(APTR iff) (a0)
*
struct DiskObject * GetCachedDefDiskObject(long type) (d0)
void FreeCachedDiskObject(struct DiskObject * icon) (a0)
struct DiskObject * GetCachedDiskObject(char * name, long flags) (a0,d0)
struct DiskObject * GetCachedDiskObjectNew(char * name, ULONG flags) (a0,d0)
ULONG IconCheckSum(struct DiskObject * icon, short which) (a0,d0)
*
APTR OpenProgressWindow(struct TagItem * tags) (a0)
==varargs
APTR OpenProgressWindowTags(Tag tags, ...) (a0)
void CloseProgressWindow(APTR win) (a0)
void HideProgressWindow(APTR win) (a0)
void ShowProgressWindow(APTR prog, struct Screen * scr, struct Window * win) (a0,a1,a2)
void SetProgressWindow(APTR win, struct TagItem * tags) (a0,a1)
==varargs
void SetProgressWindowTags(APTR win, Tag tags, ...) (a0,a1)
void GetProgressWindow(APTR win, struct TagItem * tags) (a0,a1)
==varargs
void GetProgressWindowTags(APTR win, Tag tags, ...) (a0,a1)
*
void SetNotifyRequest(APTR req, ULONG flags, ULONG mask) (a0,d0,d1)
*
void ChangeAppIcon(APTR icon, struct Image * render, struct Image * select, char * title, ULONG flags) (a0,a1,a2,a3,d0)
*
BOOL CheckProgressAbort(APTR win) (a0)
*
char * GetSecureString(struct Gadget * gad) (a0)
*
Cfg_Button * NewButtonWithFunc(APTR mem, char * label, short type) (a0,a1,d0)
*
void FreeButtonFunction(Cfg_ButtonFunction * func) (a0)
Cfg_ButtonFunction * CopyButtonFunction(Cfg_ButtonFunction * function, APTR memory, Cfg_ButtonFunction * newfunc) (a0,a1,a2)
*
struct PubScreenNode * FindPubScreen(struct Screen * scr, BOOL lock) (a0,d0)
*
long SetAppIconMenuState(APTR icon, long item, long state) (a0,d0,d1)
*
long SearchFile(APTR file, UBYTE * text, ULONG flags, UBYTE * buffer, ULONG size) (a0,a1,d0,a2,d1)
char * ParseDateStrings(char * string, char * date, char * time, long * range) (a0,a1,a2,a3)
BOOL DateFromStrings(char * date, char * time, struct DateStamp * ds) (a0,a1,a2)
*
APTR GetMatchHandle(char * name) (a0)
void FreeMatchHandle(APTR handle) (a0)
BOOL MatchFiletype(APTR handle, APTR type) (a0,a1)
*
void LayoutResize(struct Window * window) (a0)
*
BOOL GetFileVersion(char * name, short * ver, short * rev, struct DateStamp * date, APTR prog) (a0,d0,d1,a1,a2)
*
long AsyncRequest(IPCData * ipc, long type, struct Window * window, REF_CALLBACK callback, APTR data, struct TagItem * tags) (a0,d0,a1,a2,a3,d1)
==varargs
long AsyncRequestTags(IPCData * ipc, long type, struct Window * window, REF_CALLBACK callback, APTR data, Tag tags, ...) (a0,d0,a1,a2,a3,d1)
struct IntuiMessage * CheckRefreshMsg(struct Window * window, ULONG mask) (a0,d0)
*
BOOL RemapImage(APTR image, struct Screen * screen, ImageRemap * remap) (a0,a1,a2)
void FreeRemapImage(APTR image, ImageRemap * remap) (a0,a1)
*
void FreeAppMessage(DOpusAppMessage * msg) (a0)
void ReplyAppMessage(DOpusAppMessage * msg) (a0)
*
ULONG SetLibraryFlags(ULONG flags, ULONG mask) (d0,d1)
*
void StartRefreshConfigWindow(struct Window * win, long state) (a0,d0)
void EndRefreshConfigWindow(struct Window * win) (a0)
*
ULONG CompareListFormat(ListFormat * f1, ListFormat * f2) (a0,a1)
*
void UpdateGadgetValue(ObjectList * list, struct IntuiMessage * msg, UWORD id) (a0,a1,d0)
void UpdateGadgetList(ObjectList * list) (a0)
*
struct BitMap * NewBitMap(ULONG w, ULONG h, ULONG d, ULONG f, struct BitMap * b) (d0,d1,d2,d3,a0)
void DisposeBitMap(struct BitMap * b) (a0)
*
FuncArgs * ParseArgs(char * temp, char * args) (a0,a1)
void DisposeArgs(FuncArgs * args) (a0)
*
void SetConfigWindowLimits(struct Window * window, ConfigWindow * min, ConfigWindow * max) (a0,a1,a2)
*
void SetEnv(char * name, char * data, BOOL save) (a0,a1,d0)
BOOL IsListLockEmpty(struct ListLock * list) (a0)
*
DOpusAppMessage * AllocAppMessage(APTR mem, struct MsgPort * reply, short num) (a0,a1,d0)
BOOL CheckAppMessage(DOpusAppMessage * msg) (a0)
DOpusAppMessage * CopyAppMessage(DOpusAppMessage * msg, APTR mem) (a0,a1)
BOOL SetWBArg(DOpusAppMessage * msg, short num, BPTR lock, char * name, APTR mem) (a0,d0,d1,a1,a2)
*
BPTR OriginalCreateDir(char * name) (d1)
long OriginalDeleteFile(char * name) (d1)
BOOL OriginalSetFileDate(char * name, struct DateStamp * date) (d1,d2)
BOOL OriginalSetComment(char * name, char * comment) (d1,d2)
BOOL OriginalSetProtection(char * name, ULONG mask) (d1,d2)
BOOL OriginalRename(char * oldname, char * newname) (d1,d2)
BPTR OriginalOpen(char * name, LONG access) (d1,d2)
BOOL OriginalClose(BPTR file) (d1)
LONG OriginalWrite(BPTR file, void * data, LONG length) (d1,d2,d3)
*
struct Gadget * CreateTitleGadget(struct Screen * scr, struct List * list, BOOL zoom, short offset, short type, UWORD id) (a0,a1,d0,d1,d2,d3)
struct Gadget * FindGadgetType(struct Gadget * gad, UWORD type) (a0,d0)
void FixTitleGadgets(struct Window * win) (a0)
*
BOOL OriginalRelabel(char * dev, char * name) (d1,d2)
*
ILBMHandle * FakeILBM(UWORD * data, ULONG * pal, short w, short h, short d, ULONG flags) (a0,a1,d0,d1,d2,d3)
*
ULONG IPC_SafeCommand(IPCData * ipc, ULONG command, ULONG flags, APTR data, APTR data_free, struct MsgPort * reply, struct ListLock * list) (a0,d0,d1,a1,a2,a3,a4)
*
void ClearFiletypeCache() ()
*
struct Library * GetTimerBase() ()
*
BOOL InitDragDBuf(DragInfo * drag) (a0)
*
void FreeRexxMsgEx(struct RexxMsg * msg) (a0)
struct RexxMsg * CreateRexxMsgEx(struct MsgPort * port, UBYTE * extension, UBYTE * host) (a0,a1,d0)
long SetRexxVarEx(struct RexxMsg * msg, char * varname, char * value, long length) (a0,a1,d0,d1)
long GetRexxVarEx(struct RexxMsg * msg, char * varname, char ** bufpointer) (a0,a1,a2)
struct RexxMsg * BuildRexxMsgEx(struct MsgPort * port, UBYTE * extension, UBYTE * host, struct TagItem * tags) (a0,a1,d0,a2)
==varargs
struct RexxMsg * BuildRexxMsgExTags(struct MsgPort * port, UBYTE * extension, UBYTE * host, Tag tags, ...) (a0,a1,d0,a2)
*
void NotifyDiskChange() ()
void GetDosListCopy(struct List * list, APTR memory) (a0,a1)
void FreeDosListCopy(struct List * list) (a0)
*
BOOL DateFromStringsNew(char * date, char * time, struct DateStamp * ds, ULONG method) (a0,a1,a2,d0)
*
BOOL RemapIcon(struct DiskObject * icon, struct Screen * screen, short free) (a0,a1,d0)
struct DiskObject * GetOriginalIcon(struct DiskObject * icon) (a0)
*
long CalcPercent(ULONG amount, ULONG total, struct Library * utilbase) (d0,d1,a0)
*
BOOL IsDiskDevice(struct MsgPort * port) (a0)
*
void DrawDragList(struct RastPort * rp, struct ViewPort * vp, long flags) (a0,a1,d0)
void RemoveDragImage(DragInfo * drag) (a0)
*
void SetNewIconsFlags(ULONG flags, short prec) (d0,d1)
*
long ReadBufLine(APTR file, char * data, long size) (a0,a1,d0)
*
ULONG GetLibraryFlags() ()
*
short GetIconType(struct DiskObject * icon) (a0)
*
void SetReqBackFill(struct Hook * hook, struct Screen ** scr) (a0,a1)
struct Hook * LockReqBackFill(struct Screen * scr) (a0)
void UnlockReqBackFill() ()
*
BOOL DragCustomOk(struct BitMap * bm) (a0)
*
BOOL WB_LaunchNew(char * name, struct Screen * scr, short wait, long stack, char * tool) (a0,a1,d0,d1,a2)
*
void UpdatePathList() ()
void UpdateMyPaths() ()
*
void GetPopUpImageSize(struct Window * window, PopUpMenu * menu, short * width, short * height) (a0,a1,a2,a3)
*
BOOL GetDeviceUnit(BPTR startup, char * device, short * unit) (a0,a1,a2)
*
void StripWindowMessages(struct MsgPort * port, struct IntuiMessage * except) (a0,a1)
*
BOOL DeleteIcon(char * name) (a0)
*
void MUFSLogin(struct Window * window, char * name, char * password) (a0,a1,a2)
*
*
void UpdateEnvironment(CFG_ENVR * env) (a0)
*
void ConvertStartMenu(Cfg_ButtonBank * bank) (a0)
*
BPTR GetOpusPathList() ()
*
long GetStatistics(long id) (d0)
*
void SetPopUpDelay(short delay) (d0)
*
BOOL WB_LaunchNotify(char * name, struct Screen * scr, short wait, long stack, char * tool, struct Process ** proc, IPCData * notify, ULONG flags) (a0,a1,d0,d1,a2,a3,a4,d2)
*
*
struct Window * WB_AppWindowWindow(struct AppWindow * appwindow) (a0)
*
BOOL OpenEnvironment(char * name, struct OpenEnvironmentData * data) (a0,a1)
*
*
*
PopUpHandle * PopUpNewHandle(ULONG data, REF_CALLBACK callback, struct DOpusLocale * locale) (d0,a0,a1)
void PopUpFreeHandle(PopUpHandle * handle) (a0)
PopUpItem * PopUpNewItem(PopUpHandle * handle, ULONG string, ULONG id, ULONG flags) (a0,d0,d1,d2)
void PopUpSeparator(PopUpHandle * handle) (a0)
BOOL PopUpItemSub(PopUpHandle * handle, PopUpItem * item) (a0,a1)
void PopUpEndSub(PopUpHandle * handle) (a0)
ULONG PopUpSetFlags(PopUpMenu * menu, UWORD id, ULONG value, ULONG mask) (a0,d0,d1,d2)
*
APTR AddAllocBitmapPatch(struct Task * task, struct Screen * screen) (a0,a1)
void RemAllocBitmapPatch(APTR handle) (a0)
*
BOOL LoadPos(char * name, struct IBox * pos, short * font) (a0,a1,d0)
BOOL SavePos(char * name, struct IBox * pos, short font) (a0,a1,d0)
*
void DivideU64(UQUAD * num, ULONG div, UQUAD * rem, UQUAD * quo) (a0,d0,a1,a2)
void ItoaU64(UQUAD * num, char * str, int str_size, char sep) (a0,a1,d0,d1)
void DivideToString64(char * string, int str_size, UQUAD * bytes, ULONG div, int places, char sep) (a0,d0,a1,d1,d2,d3)
void BytesToString64(UQUAD * bytes, char * string, int str_size, int places, char sep) (a0,a1,d0,d1,d2)
BOOL ExamineLock64(BPTR lock, FileInfoBlock64 * fib) (d0,a0)
BOOL ExamineNext64(BPTR lock, FileInfoBlock64 * fib) (d0,a0)
BOOL ExamineHandle64(BPTR fh, FileInfoBlock64 * fib) (d0,a0)
LONG MatchFirst64(STRPTR pat, struct AnchorPath * panchor) (a0,a1)
LONG MatchNext64(struct AnchorPath * panchor) (a0)
==end
